 /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package srtf;

import javax.swing.JTextArea;

/**
 *
 * @author ryuuzaki
 */
public class Ventana extends javax.swing.JFrame {
    private String textolista1;
    private nodo critico, aux, nuevo;
    private int tiempoEntra, SuspTiempoEntra, BloqTiempoEntra;
    
    //private nodo suspendido, nuevoS,cabS,pS,auxS;
    private Procesos Proc;

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        this.critico = null;
        Proc = new Procesos();
        Proc.nuevo();
        Proc.nuevoSuspendido();
        Proc.nuevoBloqueado();
        initComponents();
    }
    public static void agregarTxtArea_Listo1(String text){
        TxtArea_Listo1.append("\n"+text);
        //this.textolista1=this.TxtArea_Listo1.getText();
        //this.TxtArea_Listo1.setText(textolista1+"\n"+text);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtArea_Listo1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TxtArea_Suspendido = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        TxtArea_CRITICO = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonQuantum = new javax.swing.JButton();
        jButtonBloquear = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jTextField_idproc = new javax.swing.JTextField();
        jTextField_tiempo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton_Agregar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TxtArea_Bloqueado = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TxtArea_Listo1.setEditable(false);
        TxtArea_Listo1.setColumns(20);
        TxtArea_Listo1.setRows(5);
        jScrollPane2.setViewportView(TxtArea_Listo1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 402, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );

        TxtArea_Suspendido.setEditable(false);
        TxtArea_Suspendido.setColumns(20);
        TxtArea_Suspendido.setRows(5);
        jScrollPane5.setViewportView(TxtArea_Suspendido);

        TxtArea_CRITICO.setEditable(false);
        TxtArea_CRITICO.setColumns(20);
        TxtArea_CRITICO.setRows(5);
        jScrollPane3.setViewportView(TxtArea_CRITICO);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setText("LISTO");

        jLabel2.setText("CRITICO");

        jButtonQuantum.setText("+1 QUANTUM");
        jButtonQuantum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuantumActionPerformed(evt);
            }
        });

        jButtonBloquear.setText("BLOQUEAR");
        jButtonBloquear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBloquearActionPerformed(evt);
            }
        });

        jLabel5.setText("Nuevo Proceso");

        jTextField_idproc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_idprocActionPerformed(evt);
            }
        });

        jTextField_tiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_tiempoActionPerformed(evt);
            }
        });

        jLabel4.setText("ID");

        jLabel6.setText("T-CPU");

        jButton_Agregar.setText("Agregar");
        jButton_Agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AgregarActionPerformed(evt);
            }
        });

        TxtArea_Bloqueado.setEditable(false);
        TxtArea_Bloqueado.setColumns(20);
        TxtArea_Bloqueado.setRows(5);
        jScrollPane4.setViewportView(TxtArea_Bloqueado);

        jLabel3.setText("BLOQUEADO");

        jLabel7.setText("SUSPENDIDO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonQuantum)
                .addGap(18, 18, 18)
                .addComponent(jButtonBloquear)
                .addGap(141, 141, 141))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(319, 319, 319)
                                .addComponent(jLabel3)
                                .addGap(37, 37, 37)))
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField_idproc, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel4)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jTextField_tiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jButton_Agregar)
                                .addGap(72, 72, 72)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabel1)
                .addGap(101, 101, 101)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_idproc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_tiempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Agregar))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonQuantum)
                    .addComponent(jButtonBloquear))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonQuantumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuantumActionPerformed
        //Este boton aumenta un quantum y va metiendo o sacando procesos de la CPU
        
        //#################################################################
        //AQUI INICIA LA PARTE DEL ANALISIS DE QUANTUMS DE SUSPENDIDO
        
        if(Proc.pS != Proc.pS.sig){ //si hay algun nodo
            Proc.nuevoS=Proc.pS.sig;
            System.out.println("entro1");
            if(Proc.nuevoS.TSUSP != 1){ // si aun debe estar en suspendido
                System.out.println("entro2");
                while(Proc.nuevoS != Proc.pS){//se repite hasta encontrar el ultimo nodo
                    Proc.nuevoS.TSUSP = Proc.nuevoS.TSUSP-1;
                    Proc.nuevoS=Proc.nuevoS.sig;//ubicar el siguiente nodo a mostrar
                }
                //AHORA REPINTO SUSPENDIDO
                TxtArea_Suspendido.setText("");
                Proc.nuevoS=Proc.pS.sig;
                while(Proc.nuevoS != Proc.pS){//se repite hasta encontrar el ultimo nodo
                    TxtArea_Suspendido.append("\n" + Proc.nuevoS.proceso + ".\t[" + Proc.nuevoS.tiempo + "]\t[" + Proc.nuevoS.TSUSP + "]");                
                    Proc.nuevoS=Proc.nuevoS.sig;
                }
             
                
            }
            if(Proc.nuevoS.TSUSP == 1){ // si esta listo para regresar a la cola de LISTO
                SuspTiempoEntra = Proc.nuevoS.tiempo;
                if((critico != null)&&(SuspTiempoEntra < critico.tiempo - 1)){
                    
                    //Agrego el proceso SUSPENDIDO entrante a LISTO
                    Proc.nuevo =new nodo();//pedir memoria, generar un nodo
                    Proc.nuevo.proceso=Proc.nuevoS.proceso;//asignar numero de proceso
                    Proc.nuevo.tiempo=Proc.nuevoS.tiempo;//tiempo de cpu que requiere
                    Proc.cab.sig=Proc.nuevo;//Actualiza el enlace para apuntar al siguiente nodo 
                    Proc.nuevo.sig=Proc.p; //actualiza el ultimo nodo con la direccion del primero
                    Proc.cab=Proc.nuevo;// actualizar el contenido de la variable para recibir el siguiente nodo

                    Proc.numProc++;

                    //Ordeno la cola de listo
                    Proc.ordenarListo();

                    //REPINTO LISTO
                    String borrar = "";
                    TxtArea_Listo1.setText(borrar);                  
                    nuevo=Proc.p.sig;//asignar direccion del primer nodo que sigue a la cpu
                    //int cont=1;
                    while(nuevo!=Proc.p){

                        String texto = nuevo.proceso + ".\t [" + nuevo.tiempo + "]";
                        Ventana.agregarTxtArea_Listo1(texto);
                        //cont++;
                       //System.out.print("\n");
                       nuevo=nuevo.sig;//ubicar el siguiente nodo a mostrar
                    }
                    
                    // lo elimino de la cola de Suspendido
                    Proc.auxS=Proc.pS;//guardar la direccion del primer nodo
                    if(Proc.auxS==Proc.auxS.sig){//verifica si hay procesos por atender
                        TxtArea_Suspendido.setText("");
                    }else{
                        Proc.auxS=Proc.pS.sig;
                        Proc.pS.sig=Proc.auxS.sig;
                        if(Proc.pS==Proc.pS.sig){
                            Proc.nuevoSuspendido();
                        }
                        // enlazar el siguiente nodo
                        //p.sig=aux.sig;// enlazar el siguiente nodo
                        //aux=p.sig;
                    }
                    
                    //mando al proceso en critico para suspendido
                    Proc.nuevoS =new nodo();//pedir memoria, generar un nodo
                    System.out.println("criticoT:"+critico.tiempo);
                    System.out.println("criticoP:"+critico.proceso);
                    Proc.nuevoS.proceso=critico.proceso;//asignar numero de proceso
                    Proc.nuevoS.tiempo=critico.tiempo - 1;//tiempo de cpu que requiere
                    //Proc.nuevoS.QTM=critico.QTM - 1;
                    //aqui va el quantum de Suspendido
                    Proc.nuevoS.TSUSP = 5;
                    Proc.cabS.sig=Proc.nuevoS;//Actualiza el enlace para apuntar al siguiente nodo 
                    Proc.nuevoS.sig=Proc.pS; //actualiza el ultimo nodo con la direccion del primero
                    Proc.cabS=Proc.nuevoS;// actualizar el contenido de la variable para recibir el siguiente nodo
                    critico=null;
                    
                    //repinto la cola de SUSPENDIDO
                    TxtArea_Suspendido.setText("");
                    Proc.nuevoS=Proc.pS.sig;
                    while(Proc.nuevoS != Proc.pS){//se repite hasta encontrar el ultimo nodo
                        Proc.nuevoS.TSUSP = Proc.nuevoS.TSUSP -1;
                        TxtArea_Suspendido.append("\n" + Proc.nuevoS.proceso + ".\t[" + Proc.nuevoS.tiempo + "]\t[" + Proc.nuevoS.TSUSP + "]");                
                        Proc.nuevoS=Proc.nuevoS.sig;
                    }    
                    
                    
                    
                
                }else{
                
                
                    // lo agrego a la cola de listo
                   System.out.println("entro a LISTO");
                    Proc.nuevo = new nodo();//pedir memoria, generar un nodo
                    Proc.nuevo.proceso=Proc.nuevoS.proceso;//asignar numero de proceso
                    Proc.nuevo.tiempo=Proc.nuevoS.tiempo;//tiempo de cpu
                    //Proc.nuevo.QTM = Proc.
                    Proc.cab.sig=Proc.nuevo;//Actualiza el enlace para apuntar al siguiente nodo 
                    Proc.nuevo.sig=Proc.p; //actualiza el ultimo nodo con la direccion del primero
                    Proc.cab=Proc.nuevo;// actualizar el contenido de la variable para recibir el siguiente nodo
                    Proc.numProc++;

                    Proc.ordenarListo();
                    //repinto la cola de LISTO
                    TxtArea_Listo1.setText("");
                    nuevo=Proc.p.sig;//asignar direccion del primer nodo que sigue a la cpu
                    while(nuevo!=Proc.p){

                        String texto = nuevo.proceso + ".\t [" + nuevo.tiempo + "]";
                        Ventana.agregarTxtArea_Listo1(texto);
                       //System.out.print("\n");
                       nuevo=nuevo.sig;//ubicar el siguiente nodo a mostrar
                    }

                    // lo elimino de la cola de SUSPENDIDO
                    Proc.auxS=Proc.pS;//guardar la direccion del primer nodo
                    if(Proc.auxS==Proc.auxS.sig){//verifica si hay procesos por atender
                        TxtArea_Suspendido.setText("no hay procesos en suspendido");
                    }else{
                        Proc.auxS=Proc.pS.sig;
                        Proc.pS.sig=Proc.auxS.sig;
                        if(Proc.pS==Proc.pS.sig){
                            Proc.nuevoSuspendido();
                        }
                        // enlazar el siguiente nodo
                        //p.sig=aux.sig;// enlazar el siguiente nodo
                        //aux=p.sig;
                    }


                    //repinto la cola de SUSPENDIDO
                    TxtArea_Suspendido.setText("");
                    Proc.nuevoS=Proc.pS.sig;
                    while(Proc.nuevoS != Proc.pS){//se repite hasta encontrar el ultimo nodo
                        TxtArea_Suspendido.append("\n" + Proc.nuevoS.proceso + ".\t[" + Proc.nuevoS.tiempo + "]\t[" + Proc.nuevoS.TSUSP + "]");                
                        Proc.nuevoS=Proc.nuevoS.sig;
                    }
                }
                    
            
                    
                    
                    
                
            }
            
        }
        
        //#################################################################
        //AQUI INICIA LA PARTE DEL ANALISIS DE QUANTUMS DE BLOQUEADO
        
        if(Proc.pB != Proc.pB.sig){ //si hay algun nodo
            Proc.nuevoB=Proc.pB.sig;
            //System.out.println("entro1");
            if(Proc.nuevoB.TBLOQ != 1){ // si aun debe estar en bloqueado
                //System.out.println("entro2");
                while(Proc.nuevoB != Proc.pB){//se repite hasta encontrar el ultimo nodo
                    Proc.nuevoB.TBLOQ = Proc.nuevoB.TBLOQ-1;
                    Proc.nuevoB=Proc.nuevoB.sig;//ubicar el siguiente nodo a mostrar
                }
                //AHORA REPINTO Bloqueado
                TxtArea_Bloqueado.setText("");
                Proc.nuevoB=Proc.pB.sig;
                while(Proc.nuevoB != Proc.pB){//se repite hasta encontrar el ultimo nodo
                    TxtArea_Bloqueado.append("\n" + Proc.nuevoB.proceso + ".\t[" + Proc.nuevoB.tiempo + "]\t[" + Proc.nuevoB.TBLOQ + "]");                
                    Proc.nuevoB=Proc.nuevoB.sig;
                }
             
                
            }
            if(Proc.nuevoB.TBLOQ == 1){ // si esta listo para regresar a la cola de LISTO
                BloqTiempoEntra = Proc.nuevoB.tiempo;
                if((critico != null)&&(BloqTiempoEntra < critico.tiempo - 1)){
                    
                    
            
                    //mando al proceso en critico para suspendido
                    Proc.nuevoS =new nodo();//pedir memoria, generar un nodo
                    Proc.nuevoS.proceso=critico.proceso;//asignar numero de proceso
                    Proc.nuevoS.tiempo=critico.tiempo - 1;//tiempo de cpu que requiere
                    //Proc.nuevoS.QTM=critico.QTM - 1;
                    //aqui va el quantum de Suspendido
                    Proc.nuevoS.TSUSP = 5;
                    Proc.cabS.sig=Proc.nuevoS;//Actualiza el enlace para apuntar al siguiente nodo 
                    Proc.nuevoS.sig=Proc.pS; //actualiza el ultimo nodo con la direccion del primero
                    Proc.cabS=Proc.nuevoS;// actualizar el contenido de la variable para recibir el siguiente nodo
                    
                    critico=null;
                    
                    //repinto SUSPENDIDO
                    TxtArea_Suspendido.append("\n" + Proc.nuevoS.proceso + ".\t[" + Proc.nuevoS.tiempo + "]\t[" + Proc.nuevoS.TSUSP + "]");                
                    
                    //Agrego el proceso Bloqueado entrante a LISTO
                    Proc.nuevo =new nodo();//pedir memoria, generar un nodo
                    Proc.nuevo.proceso=Proc.nuevoB.proceso;//asignar numero de proceso
                    Proc.nuevo.tiempo=Proc.nuevoB.tiempo;//tiempo de cpu que requiere
                    Proc.cab.sig=Proc.nuevo;//Actualiza el enlace para apuntar al siguiente nodo 
                    Proc.nuevo.sig=Proc.p; //actualiza el ultimo nodo con la direccion del primero
                    Proc.cab=Proc.nuevo;// actualizar el contenido de la variable para recibir el siguiente nodo

                    Proc.numProc++;

                    //Ordeno la cola de listo
                    Proc.ordenarListo();

                    //REPINTO LISTO
                    String borrar = "";
                    TxtArea_Listo1.setText(borrar);                  
                    nuevo=Proc.p.sig;//asignar direccion del primer nodo que sigue a la cpu
                    //int cont=1;
                    while(nuevo!=Proc.p){

                        String texto = nuevo.proceso + ".\t [" + nuevo.tiempo + "]";
                        Ventana.agregarTxtArea_Listo1(texto);
                        //cont++;
                       //System.out.print("\n");
                       nuevo=nuevo.sig;//ubicar el siguiente nodo a mostrar
                    }
                    
                    // lo elimino de la cola de BLOQUEADO
                    Proc.auxB=Proc.pB;//guardar la direccion del primer nodo
                    if(Proc.auxB==Proc.auxB.sig){//verifica si hay procesos por atender
                        TxtArea_Bloqueado.setText("");
                    }else{
                        Proc.auxB=Proc.pB.sig;
                        Proc.pB.sig=Proc.auxB.sig;
                        if(Proc.pB==Proc.pB.sig){
                            Proc.nuevoBloqueado();
                        }
                        // enlazar el siguiente nodo
                        //p.sig=aux.sig;// enlazar el siguiente nodo
                        //aux=p.sig;
                    }


                    //repinto la cola de BLOQUEADO
                    TxtArea_Bloqueado.setText("");
                    Proc.nuevoB=Proc.pB.sig;
                    while(Proc.nuevoB != Proc.pB){//se repite hasta encontrar el ultimo nodo
                        Proc.nuevoB.TBLOQ = Proc.nuevoB.TBLOQ -1;
                        TxtArea_Bloqueado.append("\n" + Proc.nuevoB.proceso + ".\t[" + Proc.nuevoB.tiempo + "]\t[" + Proc.nuevoB.TBLOQ + "]");                
                        Proc.nuevoB=Proc.nuevoB.sig;
                    }    
                     

                    
                }else{
                    // lo agrego a la cola de listo
                   //System.out.println("entro a LISTO");
                    Proc.nuevo = new nodo();//pedir memoria, generar un nodo
                    Proc.nuevo.proceso=Proc.nuevoB.proceso;//asignar numero de proceso
                    Proc.nuevo.tiempo=Proc.nuevoB.tiempo;//tiempo de cpu
                    Proc.nuevo.TBLOQ=0;
                    //Proc.nuevo.QTM = Proc.
                    Proc.cab.sig=Proc.nuevo;//Actualiza el enlace para apuntar al siguiente nodo 
                    Proc.nuevo.sig=Proc.p; //actualiza el ultimo nodo con la direccion del primero
                    Proc.cab=Proc.nuevo;// actualizar el contenido de la variable para recibir el siguiente nodo
                    Proc.numProc++;
                    
                    Proc.ordenarListo();
                    //repinto la cola de LISTO

                    String borrar = "";
                    TxtArea_Listo1.setText(borrar);

                    System.out.println("Estas es la cola de listo:");
                    Proc.imprimirColProc();
                    Proc.ordenarListo();
                    System.out.println("Estas es la nueva cola de listo:");
                    Proc.imprimirColProc();
                    nuevo=Proc.p.sig;//asignar direccion del primer nodo que sigue a la cpu
                    //int cont=1;
                        while(nuevo!=Proc.p){
                            String texto = nuevo.proceso + ".\t [" + nuevo.tiempo + "]";
                            Ventana.agregarTxtArea_Listo1(texto);
                            //cont++;
                           //System.out.print("\n");
                           nuevo=nuevo.sig;//ubicar el siguiente nodo a mostrar
                        }


                    // lo elimino de la cola de BLOQUEADO
                    Proc.auxB=Proc.pB;//guardar la direccion del primer nodo
                    if(Proc.auxB==Proc.auxB.sig){//verifica si hay procesos por atender
                        TxtArea_Bloqueado.setText("");
                    }else{
                        Proc.auxB=Proc.pB.sig;
                        Proc.pB.sig=Proc.auxB.sig;
                        if(Proc.pB==Proc.pB.sig){
                            Proc.nuevoBloqueado();
                        }
                        // enlazar el siguiente nodo
                        //p.sig=aux.sig;// enlazar el siguiente nodo
                        //aux=p.sig;
                    }


                    //repinto la cola de BLOQUEADO
                    TxtArea_Bloqueado.setText("");
                    Proc.nuevoB=Proc.pB.sig;
                    while(Proc.nuevoB != Proc.pB){//se repite hasta encontrar el ultimo nodo
                        Proc.nuevoB.TBLOQ = Proc.nuevoB.TBLOQ -1;
                        TxtArea_Bloqueado.append("\n" + Proc.nuevoB.proceso + ".\t[" + Proc.nuevoB.tiempo + "]\t[" + Proc.nuevoB.TBLOQ + "]");                
                        Proc.nuevoB=Proc.nuevoB.sig;
                    }    
                }
            
                    
                    
                    
                
            }
            
        }
        
        //#################################################################
        //AQUI INICIA LA PARTE DEL ANALISIS DE QUANTUMS DE CRITICO
        Proc.ordenarListo();
        
        if(critico != null){ //revisa si hay algo en critico
            if(critico.tiempo == 1){//revisa si el proceso en critico esta listo para salir
                //limpia la pantalla
                TxtArea_CRITICO.setText("");                
                critico = null;
                //revisa si aun queda tiempo de ejecucion y decide si lo manda a SUSP
                //-----t_proceso=matProc[k][1];//es el tiempo del proceso que le asignamos
                
            }else{ //si no esta listo para salir le descontamos un QTM
                if(aux==aux.sig){//verifica si hay procesos por atender
                   TxtArea_CRITICO.setText("");
                }else{
                    critico.tiempo = critico.tiempo - 1;
                    //critico.QTM =critico.QTM -1;
                    // ahora repintamos la GUI
                    TxtArea_CRITICO.setText("");
                    //TxtArea_CRITICO.setText("hola");
                    TxtArea_CRITICO.append(critico.proceso + ".\t[" + critico.tiempo + "]");
                }
            }
        }
        
        if(critico == null){//si no hay nada en critico entonces le agrega un proceso
            critico = Proc.p.sig;
            //elimino el nodo que entró a critico de LISTO
            aux=Proc.p;//guardar la direccion del primer nodo
            if(aux==aux.sig){//verifica si hay procesos por atender
                    critico=null;
                   TxtArea_CRITICO.setText("");
            }else{
                aux=Proc.p.sig;
                Proc.p.sig=aux.sig;// enlazar el siguiente nodo
                Proc.numProc--;
                //repintar la cola de LISTO
                String borrar = "";
                TxtArea_Listo1.setText(borrar);
                nuevo=Proc.p.sig;//asignar direccion del primer nodo que sigue a la cpu
                int cont=1;
                    while(nuevo!=Proc.p){

                        String texto = nuevo.proceso + ".\t [" + nuevo.tiempo + "]";
                        Ventana.agregarTxtArea_Listo1(texto);
                        cont++;
                       //System.out.print("\n");
                       nuevo=nuevo.sig;//ubicar el siguiente nodo a mostrar
                    }
               

               if( critico != Proc.p){//revisa si aun hay procesos para agregar
                   //y muestra en la GUI el nuevo proceso en Critico
                   TxtArea_CRITICO.setText("");
                   //TxtArea_CRITICO.setText("nuevo proc crit");
                   TxtArea_CRITICO.append(critico.proceso + ".\t[" + critico.tiempo + "]");
               }else{
                   critico=null;
                   TxtArea_CRITICO.setText("");
               }
            
            }
        }
        if(Proc.p==Proc.p.sig){
                        Proc.nuevo();
                    }
        
        //#################################################################
        
        
        
        //Primero
        //Proc.imprimirMatProc();
    }//GEN-LAST:event_jButtonQuantumActionPerformed

    private void jButtonBloquearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBloquearActionPerformed
        // TODO add your handling code here:
        if(TxtArea_Bloqueado.getText().equals("") && TxtArea_CRITICO.getText().equals("") && TxtArea_Listo1.getText().equals("")){
        
        }else{
            Proc.nuevoB =new nodo();//pedir memoria, generar un nodo
            Proc.nuevoB.proceso=critico.proceso;//asignar numero de proceso
            Proc.nuevoB.tiempo=critico.tiempo;//tiempo de cpu que requiere
            //Proc.nuevoB.QTM=critico.QTM - 1;
            //aqui va el quantum de Suspendido
            Proc.nuevoB.TBLOQ = 5;
            Proc.cabB.sig=Proc.nuevoB;//Actualiza el enlace para apuntar al siguiente nodo 
            Proc.nuevoB.sig=Proc.pB; //actualiza el ultimo nodo con la direccion del primero
            Proc.cabB=Proc.nuevoB;// actualizar el contenido de la variable para recibir el siguiente nodo
            critico = null;
            //repinto BLOQUEADO
            TxtArea_Bloqueado.append("\n" + Proc.nuevoB.proceso + ".\t[" + Proc.nuevoB.tiempo + "]" + "\t[" + Proc.nuevoB.TBLOQ + "]");                
            jButtonQuantum.doClick();
        }
    }//GEN-LAST:event_jButtonBloquearActionPerformed

    private void jTextField_idprocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_idprocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_idprocActionPerformed

    private void jTextField_tiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_tiempoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_tiempoActionPerformed

    private void jButton_AgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AgregarActionPerformed
        // TODO add your handling code here:
        
        //verifico si el nodo que entra debe desplazar al proceso en critico
        tiempoEntra = Integer.parseInt(jTextField_tiempo.getText());
        if((critico != null)&&(tiempoEntra < critico.tiempo)){
            
            //mando al proceso en critico para suspendido
            Proc.nuevoS =new nodo();//pedir memoria, generar un nodo
            Proc.nuevoS.proceso=critico.proceso;//asignar numero de proceso
            Proc.nuevoS.tiempo=critico.tiempo;//tiempo de cpu que requiere
            //Proc.nuevoS.QTM=critico.QTM - 1;
            //aqui va el quantum de Suspendido
            Proc.nuevoS.TSUSP = 5;
            Proc.cabS.sig=Proc.nuevoS;//Actualiza el enlace para apuntar al siguiente nodo 
            Proc.nuevoS.sig=Proc.pS; //actualiza el ultimo nodo con la direccion del primero
            Proc.cabS=Proc.nuevoS;// actualizar el contenido de la variable para recibir el siguiente nodo

            //repinto SUSPENDIDO
            TxtArea_Suspendido.append("\n" + Proc.nuevoS.proceso + ".\t[" + Proc.nuevoS.tiempo + "]\t[" + Proc.nuevoS.TSUSP + "]");                

             //Agrego el proceso entrante a critico
            critico.proceso = jTextField_idproc.getText();
            critico.tiempo = Integer.parseInt(jTextField_tiempo.getText());
            
            //repinto critico
            TxtArea_CRITICO.setText(critico.proceso + ".\t[" + critico.tiempo + "]");
            

        }else{
        // creo el nodo y lo agrego a la cola de LISTO
        
        Proc.nuevo =new nodo();//pedir memoria, generar un nodo
        Proc.nuevo.proceso=jTextField_idproc.getText();//asignar numero de proceso
        Proc.nuevo.tiempo=Integer.parseInt(jTextField_tiempo.getText());//tiempo de cpu que requiere
        Proc.cab.sig=Proc.nuevo;//Actualiza el enlace para apuntar al siguiente nodo 
        Proc.nuevo.sig=Proc.p; //actualiza el ultimo nodo con la direccion del primero
        Proc.cab=Proc.nuevo;// actualizar el contenido de la variable para recibir el siguiente nodo
        
        Proc.numProc++;
        
        //Ordeno la cola de listo
        Proc.ordenarListo();
        
        //REPINTO LISTO Y LIMPIO LAS CASILLAS DE AGREGAR
        String borrar = "";
        TxtArea_Listo1.setText(borrar);
        jTextField_idproc.setText(borrar);
        jTextField_tiempo.setText(borrar);
        nuevo=Proc.p.sig;//asignar direccion del primer nodo que sigue a la cpu
        //int cont=1;
        while(nuevo!=Proc.p){

            String texto = nuevo.proceso + ".\t [" + nuevo.tiempo + "]";
            Ventana.agregarTxtArea_Listo1(texto);
            //cont++;
           //System.out.print("\n");
           nuevo=nuevo.sig;//ubicar el siguiente nodo a mostrar
        }
        }
    }//GEN-LAST:event_jButton_AgregarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextArea TxtArea_Bloqueado;
    public static javax.swing.JTextArea TxtArea_CRITICO;
    public static javax.swing.JTextArea TxtArea_Listo1;
    public static javax.swing.JTextArea TxtArea_Suspendido;
    private javax.swing.JButton jButtonBloquear;
    private javax.swing.JButton jButtonQuantum;
    private javax.swing.JButton jButton_Agregar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    public javax.swing.JTextField jTextField_idproc;
    public javax.swing.JTextField jTextField_tiempo;
    // End of variables declaration//GEN-END:variables
}
